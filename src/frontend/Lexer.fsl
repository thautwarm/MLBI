{
// Opens methods related to fslex.exe
open FSharp.Text.Lexing


let newline (lexbuf: LexBuffer<_>) =
  lexbuf.StartPos <- lexbuf.StartPos.NextLine

}

// Regular expressions
let whitespace = [' ' '\t' ]
let newline = ('\n' | '\r' '\n')
let id = ['a'-'z' 'A'-'Z' '_'] ['-' '%' 'a'-'z' 'A'-'Z' '0'-'9' '_']*
let digit = ['0'-'9']
let decimal = digit+

rule tokenstream = parse
| "hello" 		{ Parser.HELLO }
| "external"    { Parser.EXTERN }
| ","    { Parser.COMMA }
| "("    { Parser.LP }
| ")"    { Parser.RP }
| "forall" { Parser.FORALL }
| "." { Parser.DOT }
| ";" { Parser.SEMICOLON }
| "let" { Parser.LET }
| "in" { Parser.IN }
| "fun" { Parser.FUN }
| "->" { Parser.ARROW }
| ":" { Parser.COLON }
| "`" { Parser.QUOTE }
| "|" { Parser.XOR }
| id { NAME (LexBuffer<_>.LexemeString lexbuf) }
| decimal { DECIMAL  (Int32.Parse(LexBuffer<_>.LexemeString lexbuf )) }
| whitespace	{ tokenstream lexbuf }
| newline	{ newline lexbuf; tokenstream lexbuf }
| _    		{ failwith ("ParseError" + LexBuffer<_>.LexemeString lexbuf) }
| eof   	{ Parser.EOF }